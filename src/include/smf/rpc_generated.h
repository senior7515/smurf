// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RPC_SMF_RPC_H_
#define FLATBUFFERS_GENERATED_RPC_SMF_RPC_H_

#include "flatbuffers/flatbuffers.h"

namespace smf {
namespace rpc {

struct header;

struct dynamic_header;
struct dynamic_headerT;

struct payload_headers;
struct payload_headersT;

struct null_type;
struct null_typeT;

/// \brief: headers that are stored in an int
/// so they need to be inclusive. That is, you can turn on
/// many flags at the same time, i.e.: enable checksum and
/// have the payload be zlib compressed.
///
enum compression_flags {
  compression_flags_none = 0,
  compression_flags_disabled = 1,
  compression_flags_zstd = 2,
  compression_flags_lz4 = 3,
  compression_flags_MIN = compression_flags_none,
  compression_flags_MAX = compression_flags_lz4
};

inline compression_flags (&EnumValuescompression_flags())[4] {
  static compression_flags values[] = {
    compression_flags_none,
    compression_flags_disabled,
    compression_flags_zstd,
    compression_flags_lz4
  };
  return values;
}

inline const char **EnumNamescompression_flags() {
  static const char *names[] = {
    "none",
    "disabled",
    "zstd",
    "lz4",
    nullptr
  };
  return names;
}

inline const char *EnumNamecompression_flags(compression_flags e) {
  const size_t index = static_cast<int>(e);
  return EnumNamescompression_flags()[index];
}

enum header_bit_flags {
  header_bit_flags_has_payload_headers = 1,
  header_bit_flags_NONE = 0,
  header_bit_flags_ANY = 1
};

inline header_bit_flags (&EnumValuesheader_bit_flags())[1] {
  static header_bit_flags values[] = {
    header_bit_flags_has_payload_headers
  };
  return values;
}

inline const char **EnumNamesheader_bit_flags() {
  static const char *names[] = {
    "has_payload_headers",
    nullptr
  };
  return names;
}

inline const char *EnumNameheader_bit_flags(header_bit_flags e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(header_bit_flags_has_payload_headers);
  return EnumNamesheader_bit_flags()[index];
}

/// \brief: header parsed by rpc engine
/// must be sizeof()'able
/// that is, must be a struct in fbs language
///
/// layout
/// [ 8bits(compression) + 8bits(bitflags) + 16bits(session) + 32bits(size) + 32bits(checksum) + 32bits(meta) ]
/// total = 128bits == 16bytes
///
MANUALLY_ALIGNED_STRUCT(4) header FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t compression_;
  int8_t bitflags_;
  uint16_t session_;
  uint32_t size_;
  uint32_t checksum_;
  uint32_t meta_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.header";
  }
  header() {
    memset(this, 0, sizeof(header));
  }
  header(compression_flags _compression, header_bit_flags _bitflags, uint16_t _session, uint32_t _size, uint32_t _checksum, uint32_t _meta)
      : compression_(flatbuffers::EndianScalar(static_cast<int8_t>(_compression))),
        bitflags_(flatbuffers::EndianScalar(static_cast<int8_t>(_bitflags))),
        session_(flatbuffers::EndianScalar(_session)),
        size_(flatbuffers::EndianScalar(_size)),
        checksum_(flatbuffers::EndianScalar(_checksum)),
        meta_(flatbuffers::EndianScalar(_meta)) {
  }
  compression_flags compression() const {
    return static_cast<compression_flags>(flatbuffers::EndianScalar(compression_));
  }
  void mutate_compression(compression_flags _compression) {
    flatbuffers::WriteScalar(&compression_, static_cast<int8_t>(_compression));
  }
  header_bit_flags bitflags() const {
    return static_cast<header_bit_flags>(flatbuffers::EndianScalar(bitflags_));
  }
  void mutate_bitflags(header_bit_flags _bitflags) {
    flatbuffers::WriteScalar(&bitflags_, static_cast<int8_t>(_bitflags));
  }
  /// 16 bits for storing the actual session id.
  /// used for streaming client and slot allocation
  uint16_t session() const {
    return flatbuffers::EndianScalar(session_);
  }
  void mutate_session(uint16_t _session) {
    flatbuffers::WriteScalar(&session_, _session);
  }
  /// size of the next payload
  uint32_t size() const {
    return flatbuffers::EndianScalar(size_);
  }
  void mutate_size(uint32_t _size) {
    flatbuffers::WriteScalar(&size_, _size);
  }
  /// currently we use (xxhash64 & UINT32_MAX)
  uint32_t checksum() const {
    return flatbuffers::EndianScalar(checksum_);
  }
  void mutate_checksum(uint32_t _checksum) {
    flatbuffers::WriteScalar(&checksum_, _checksum);
  }
  /// \brief used for sending and receiving, read carefully.
  ///
  /// Receiving:
  ///
  /// Uses the same as HTTP status - on the receiving end
  /// We don't want to pay the cost of parsing a header
  /// On every response as does HTTP. std::to_string and std::stol()
  /// are needlesly expensive
  ///
  /// Sending:
  ///
  /// Used with the xor hash of Service::ID() ^ Service::Method::ID()
  /// This is how the server multiplexer figures out what function pointer
  /// to call
  ///
  uint32_t meta() const {
    return flatbuffers::EndianScalar(meta_);
  }
  void mutate_meta(uint32_t _meta) {
    flatbuffers::WriteScalar(&meta_, _meta);
  }
};
STRUCT_END(header, 16);

struct dynamic_headerT : public flatbuffers::NativeTable {
  typedef dynamic_header TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.dynamic_headerT";
  }
  seastar::sstring key;
  seastar::sstring value;
  dynamic_headerT() {
  }
};

/// \brief used for extra headers, ala HTTP
/// The use case for the core is to support
/// zipkin/google-Dapper style tracing
struct dynamic_header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef dynamic_headerT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.dynamic_header";
  }
  enum {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  /// alows for binary search lookup
  /// use with CreateVectorOfSortedTables<> instead of the CreateVector
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  flatbuffers::String *mutable_key() {
    return GetPointer<flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const dynamic_header *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(key()->c_str(), val);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  flatbuffers::String *mutable_value() {
    return GetPointer<flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
  dynamic_headerT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(dynamic_headerT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<dynamic_header> Pack(flatbuffers::FlatBufferBuilder &_fbb, const dynamic_headerT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct dynamic_headerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(dynamic_header::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(dynamic_header::VT_VALUE, value);
  }
  explicit dynamic_headerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  dynamic_headerBuilder &operator=(const dynamic_headerBuilder &);
  flatbuffers::Offset<dynamic_header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<dynamic_header>(end);
    fbb_.Required(o, dynamic_header::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<dynamic_header> Createdynamic_header(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  dynamic_headerBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<dynamic_header> Createdynamic_headerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  return smf::rpc::Createdynamic_header(
      _fbb,
      key ? _fbb.CreateString(key) : 0,
      value ? _fbb.CreateString(value) : 0);
}

flatbuffers::Offset<dynamic_header> Createdynamic_header(flatbuffers::FlatBufferBuilder &_fbb, const dynamic_headerT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct payload_headersT : public flatbuffers::NativeTable {
  typedef payload_headers TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.payload_headersT";
  }
  std::vector<std::unique_ptr<dynamic_headerT>> dynamic_headers;
  uint32_t size;
  uint32_t checksum;
  compression_flags compression;
  payload_headersT()
      : size(0),
        checksum(0),
        compression(compression_flags_none) {
  }
};

struct payload_headers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef payload_headersT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.payload_headers";
  }
  enum {
    VT_DYNAMIC_HEADERS = 4,
    VT_SIZE = 6,
    VT_CHECKSUM = 8,
    VT_COMPRESSION = 10
  };
  /// Headers for forward compat.
  const flatbuffers::Vector<flatbuffers::Offset<dynamic_header>> *dynamic_headers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<dynamic_header>> *>(VT_DYNAMIC_HEADERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<dynamic_header>> *mutable_dynamic_headers() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<dynamic_header>> *>(VT_DYNAMIC_HEADERS);
  }
  /// We need to chain the actual payload
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  bool mutate_size(uint32_t _size) {
    return SetField<uint32_t>(VT_SIZE, _size, 0);
  }
  uint32_t checksum() const {
    return GetField<uint32_t>(VT_CHECKSUM, 0);
  }
  bool mutate_checksum(uint32_t _checksum) {
    return SetField<uint32_t>(VT_CHECKSUM, _checksum, 0);
  }
  compression_flags compression() const {
    return static_cast<compression_flags>(GetField<int8_t>(VT_COMPRESSION, 0));
  }
  bool mutate_compression(compression_flags _compression) {
    return SetField<int8_t>(VT_COMPRESSION, static_cast<int8_t>(_compression), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DYNAMIC_HEADERS) &&
           verifier.Verify(dynamic_headers()) &&
           verifier.VerifyVectorOfTables(dynamic_headers()) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyField<uint32_t>(verifier, VT_CHECKSUM) &&
           VerifyField<int8_t>(verifier, VT_COMPRESSION) &&
           verifier.EndTable();
  }
  payload_headersT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(payload_headersT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<payload_headers> Pack(flatbuffers::FlatBufferBuilder &_fbb, const payload_headersT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct payload_headersBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dynamic_headers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<dynamic_header>>> dynamic_headers) {
    fbb_.AddOffset(payload_headers::VT_DYNAMIC_HEADERS, dynamic_headers);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(payload_headers::VT_SIZE, size, 0);
  }
  void add_checksum(uint32_t checksum) {
    fbb_.AddElement<uint32_t>(payload_headers::VT_CHECKSUM, checksum, 0);
  }
  void add_compression(compression_flags compression) {
    fbb_.AddElement<int8_t>(payload_headers::VT_COMPRESSION, static_cast<int8_t>(compression), 0);
  }
  explicit payload_headersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  payload_headersBuilder &operator=(const payload_headersBuilder &);
  flatbuffers::Offset<payload_headers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<payload_headers>(end);
    return o;
  }
};

inline flatbuffers::Offset<payload_headers> Createpayload_headers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<dynamic_header>>> dynamic_headers = 0,
    uint32_t size = 0,
    uint32_t checksum = 0,
    compression_flags compression = compression_flags_none) {
  payload_headersBuilder builder_(_fbb);
  builder_.add_checksum(checksum);
  builder_.add_size(size);
  builder_.add_dynamic_headers(dynamic_headers);
  builder_.add_compression(compression);
  return builder_.Finish();
}

inline flatbuffers::Offset<payload_headers> Createpayload_headersDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<dynamic_header>> *dynamic_headers = nullptr,
    uint32_t size = 0,
    uint32_t checksum = 0,
    compression_flags compression = compression_flags_none) {
  return smf::rpc::Createpayload_headers(
      _fbb,
      dynamic_headers ? _fbb.CreateVector<flatbuffers::Offset<dynamic_header>>(*dynamic_headers) : 0,
      size,
      checksum,
      compression);
}

flatbuffers::Offset<payload_headers> Createpayload_headers(flatbuffers::FlatBufferBuilder &_fbb, const payload_headersT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct null_typeT : public flatbuffers::NativeTable {
  typedef null_type TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.null_typeT";
  }
  null_typeT() {
  }
};

/// \brief, useful when the type is empty
/// i.e.: void foo();
/// rpc my_rpc { null_type MutateOnlyOnServerMethod(int); }
///
struct null_type FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef null_typeT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "smf.rpc.null_type";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  null_typeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(null_typeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<null_type> Pack(flatbuffers::FlatBufferBuilder &_fbb, const null_typeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct null_typeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit null_typeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  null_typeBuilder &operator=(const null_typeBuilder &);
  flatbuffers::Offset<null_type> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<null_type>(end);
    return o;
  }
};

inline flatbuffers::Offset<null_type> Createnull_type(
    flatbuffers::FlatBufferBuilder &_fbb) {
  null_typeBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<null_type> Createnull_type(flatbuffers::FlatBufferBuilder &_fbb, const null_typeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline dynamic_headerT *dynamic_header::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new dynamic_headerT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void dynamic_header::UnPackTo(dynamic_headerT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = key(); if (_e) _o->key = _e->str(); };
  { auto _e = value(); if (_e) _o->value = _e->str(); };
}

inline flatbuffers::Offset<dynamic_header> dynamic_header::Pack(flatbuffers::FlatBufferBuilder &_fbb, const dynamic_headerT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createdynamic_header(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<dynamic_header> Createdynamic_header(flatbuffers::FlatBufferBuilder &_fbb, const dynamic_headerT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const dynamic_headerT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _key = _fbb.CreateString(_o->key);
  auto _value = _o->value.empty() ? 0 : _fbb.CreateString(_o->value);
  return smf::rpc::Createdynamic_header(
      _fbb,
      _key,
      _value);
}

inline payload_headersT *payload_headers::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new payload_headersT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void payload_headers::UnPackTo(payload_headersT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dynamic_headers(); if (_e) { _o->dynamic_headers.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dynamic_headers[_i] = std::unique_ptr<dynamic_headerT>(_e->Get(_i)->UnPack(_resolver)); } } };
  { auto _e = size(); _o->size = _e; };
  { auto _e = checksum(); _o->checksum = _e; };
  { auto _e = compression(); _o->compression = _e; };
}

inline flatbuffers::Offset<payload_headers> payload_headers::Pack(flatbuffers::FlatBufferBuilder &_fbb, const payload_headersT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createpayload_headers(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<payload_headers> Createpayload_headers(flatbuffers::FlatBufferBuilder &_fbb, const payload_headersT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const payload_headersT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dynamic_headers = _o->dynamic_headers.size() ? _fbb.CreateVector<flatbuffers::Offset<dynamic_header>> (_o->dynamic_headers.size(), [](size_t i, _VectorArgs *__va) { return Createdynamic_header(*__va->__fbb, __va->__o->dynamic_headers[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _size = _o->size;
  auto _checksum = _o->checksum;
  auto _compression = _o->compression;
  return smf::rpc::Createpayload_headers(
      _fbb,
      _dynamic_headers,
      _size,
      _checksum,
      _compression);
}

inline null_typeT *null_type::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new null_typeT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void null_type::UnPackTo(null_typeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<null_type> null_type::Pack(flatbuffers::FlatBufferBuilder &_fbb, const null_typeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createnull_type(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<null_type> Createnull_type(flatbuffers::FlatBufferBuilder &_fbb, const null_typeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const null_typeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return smf::rpc::Createnull_type(
      _fbb);
}

inline flatbuffers::TypeTable *headerTypeTable();

inline flatbuffers::TypeTable *dynamic_headerTypeTable();

inline flatbuffers::TypeTable *payload_headersTypeTable();

inline flatbuffers::TypeTable *null_typeTypeTable();

inline flatbuffers::TypeTable *compression_flagsTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    compression_flagsTypeTable
  };
  static const char *names[] = {
    "none",
    "disabled",
    "zstd",
    "lz4"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *header_bit_flagsTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    header_bit_flagsTypeTable
  };
  static const int32_t values[] = { 1 };
  static const char *names[] = {
    "has_payload_headers"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 1, type_codes, type_refs, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *headerTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 1 },
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    compression_flagsTypeTable,
    header_bit_flagsTypeTable
  };
  static const int32_t values[] = { 0, 1, 2, 4, 8, 12, 16 };
  static const char *names[] = {
    "compression",
    "bitflags",
    "session",
    "size",
    "checksum",
    "meta"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 6, type_codes, type_refs, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *dynamic_headerTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char *names[] = {
    "key",
    "value"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *payload_headersTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 1, 0 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 1 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    dynamic_headerTypeTable,
    compression_flagsTypeTable
  };
  static const char *names[] = {
    "dynamic_headers",
    "size",
    "checksum",
    "compression"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *null_typeTypeTable() {
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace rpc
}  // namespace smf

#endif  // FLATBUFFERS_GENERATED_RPC_SMF_RPC_H_
