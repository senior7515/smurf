// automatically generated by the FlatBuffers compiler, do not modify

package smf;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PayloadHeaders extends Table {
  public static PayloadHeaders getRootAsPayloadHeaders(ByteBuffer _bb) { return getRootAsPayloadHeaders(_bb, new PayloadHeaders()); }
  public static PayloadHeaders getRootAsPayloadHeaders(ByteBuffer _bb, PayloadHeaders obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public PayloadHeaders __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Headers for forward compat.
   */
  public DynamicHeader dynamicHeaders(int j) { return dynamicHeaders(new DynamicHeader(), j); }
  public DynamicHeader dynamicHeaders(DynamicHeader obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dynamicHeadersLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public DynamicHeader dynamicHeadersByKey(String key) { int o = __offset(4); return o != 0 ? DynamicHeader.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public DynamicHeader dynamicHeadersByKey(DynamicHeader obj, String key) { int o = __offset(4); return o != 0 ? DynamicHeader.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  /**
   * We need to chain the actual payload
   */
  public long size() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long checksum() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte compression() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createPayloadHeaders(FlatBufferBuilder builder,
      int dynamic_headersOffset,
      long size,
      long checksum,
      byte compression) {
    builder.startObject(4);
    PayloadHeaders.addChecksum(builder, checksum);
    PayloadHeaders.addSize(builder, size);
    PayloadHeaders.addDynamicHeaders(builder, dynamic_headersOffset);
    PayloadHeaders.addCompression(builder, compression);
    return PayloadHeaders.endPayloadHeaders(builder);
  }

  public static void startPayloadHeaders(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addDynamicHeaders(FlatBufferBuilder builder, int dynamicHeadersOffset) { builder.addOffset(0, dynamicHeadersOffset, 0); }
  public static int createDynamicHeadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDynamicHeadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(1, (int)size, (int)0L); }
  public static void addChecksum(FlatBufferBuilder builder, long checksum) { builder.addInt(2, (int)checksum, (int)0L); }
  public static void addCompression(FlatBufferBuilder builder, byte compression) { builder.addByte(3, compression, 0); }
  public static int endPayloadHeaders(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

