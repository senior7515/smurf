// Copyright 2017 Alexander Gallego
//

namespace smf.fbs.raft;

table Void {} // just a tag

table Server {
  id:ulong;
  address:string;
}
table Configuration {
  /// The servers in a **stable** configuration, or the **old** servers
  /// in a transitional configuration
  prev_servers:[Server];

  /// Servers **not present in a stable** configuration, or **new**
  /// servers in a transitional configuration
  next_servers:[Server];
}

table Entry {
  /// The term in which the entry was first created
  term: ulong;

  /// The index for the entry. Used by followers to check they've got
  /// an entry at the right index. (like kafka-offset?)
  ///
  index: ulong;

  ///
  /// I think this is extra and not needed in the RPC
  /// number of nano seconds the cluster has had a leader
  ///
  nano_leader_time: ulong;

  /// the payload to save
  data: [ubyte];
}


table VoteRequest {
  /// \brief request of the caller, so if it re-requests the vote from
  /// the callee, the server will respond granted
  /// lookup against configuration
  server_id: ulong;

  /// \brief caller's term
  term: ulong;

  /// \brief term of last entry in callers log.
  /// used to compare completeness
  last_log_term: ulong;

  /// \brief id of last entry in the caller's log.
  /// used to compare log completeness
  last_log_index: ulong;
}
table VoteReply {
  /// \brief calee's term, for caller to update itself.
  term: ulong;

  /// True if the follower granted the candidate it's vote, false otherwise
  granted: bool;

  /// set to true if the caller's log is as up to date as the recipient's
  /// - extension on raft. see Diego's phd dissertation, section 9.6
  /// - "Preventing disruptions when a server rejoins the cluster"
  log_ok: bool;
}

table AppendEntriesRequest{
  /// id of leader (caller), so the follower can redirect clients
  server_id: ulong;
  /// caller's term
  term: ulong;
  /// log entries to store or empty for heartbeat
  entries: [Entry];

  /// TODO(agallego) - ask about this method on the mailing list
  ///  -... so why would a request to append entries have the follower
  /// (me/this server) commit index - maybe used when entries are empty...
  /// write a more formal description, but basically you can always append
  /// entries, however advancing the index is the key here
  ///
  /// last committed entry that the follower has, so the follower can advance
  /// it's state machine
  commit_index: ulong;
}
struct ServerCapabilities {
  min_version: ushort; // 0 - 65535
  max_version: ushort;
}
table AppendEntriesReply{
  /// callee's term, for the caller to upate itself
  term: ulong;
  /// true if the entries were added to the log
  success: bool;
  /// The recipient's last log index after it applied THIS rpc's changes to the
  /// log. This is used to speed up finding the correct value for the nextIndex
  /// with a follower that is far behind a leader
  last_log_index: ulong;

  /// send back to the leader to inform what code the follower is running
  /// the range is inclusive between min and max;
  server_capabilities: ServerCapabilities;
}

table InstallSnapshotRequest{
  /// id of the caller/leader, so the follower can redirect clients
  server_id: ulong;
  /// caller's term
  term: ulong;

  /// the snapshot covers the range [1, lastSnapshotIndex]
  last_snapshot_index: ulong;

  /// the byte offset where the 'data' belongs in the file. Followers can
  /// expect this to grow without gaps. They should use this to drop duplicate
  /// messages/requests
  byte_offset: ulong;

  /// raw bytes of the snapshot file. This could be partial RPC for snapshot
  /// see done field
  data: [ubyte];

  /// true if this is the last chunk for the file and the follower should now
  /// load the contents; false otherwise
  done: bool;
}


table InstallSnapshotReply{
  /// callee's term, for the caller to update itself;
  term: ulong;
  /// total number of bytes in the snapshot that the follower has stored, after
  /// applying the request;
  bytes_stored: ulong;
}

rpc_service raft_api {
  /// Stores a 'Configuration' to be used internally by the consensus
  configuration_update(Configuration): Void;

  /// ask a server for its vote in an election algorithm
  vote(VoteRequest): VoteReply;
  /// used to replicate logs to the follower
  append_entries(AppendEntriesRequest): AppendEntriesReply;

  install_snapshot(InstallSnapshotRequest): InstallSnapshotReply;
}
