namespace smf.chains;

enum tx_operation:short {
  begin,
  data,
  commit,
  abort,
  /// this is an optimization for a full transaction that is small
  /// i.e.: one put. it is equivalent as (begin | data | commit)
  full
}

/// This is the datastructure that gets persisted on disk.
/// Please be tender while extending
table tx_fragment {
  /// what should we do with this trasaction fragment
  op: tx_operation;
  /// sequence id.. not sure if needed
  id: uint;
  time: ulong;
  key: [ubyte];
  value: [ubyte];
}

/// brief - stores `puts` transactionally
table tx_put_request {
  topic: string;
  partition: uint;
  chain: [uint];
  txs: [tx_fragment];
}
table tx_put_reply {}


table tx_get_request {
  topic: string;
  partition: uint;
  offset: ulong;
  max_bytes: uint;
}

table tx_get_reply {
  next_offset: ulong;
  puts: [tx_fragment];
}

rpc_service chain_replication {
  put(tx_put_request): tx_put_reply;
  get(tx_get_request): tx_get_reply;
}
