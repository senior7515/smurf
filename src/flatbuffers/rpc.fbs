// Copyright 2017 Alexander Gallego
//

namespace smf.rpc;

/// \brief: headers that are stored in an int
/// so they need to be inclusive. That is, you can turn on
/// many flags at the same time, i.e.: enable checksum and
/// have the payload be zlib compressed.
///
enum compression_flags:byte (bit_flags) {
  /// brief uses zstandard 1.0
  zstd,
  /// lz4 is pending 
  lz4
}
enum validation_flags:byte (bit_flags) {
  /// \brief check the compressed payload if enabled.
  checksum,
  /// \brief do a full flatbuffers type check on the received payload
  /// by default gRPC does verification, but flatbuffers is opt-in
  full_type_check
}

/// \brief: header parsed by rpc engine
/// must be sizeof()'able
/// that is, must be a struct in fbs language
///
struct header {
  size: uint = 0;
  compression: compression_flags = zstd;
  validation:  validation_flags = checksum;
  /// currently we use xxhash32
  checksum: uint = 0;
}

/// \brief used for extra headers, ala HTTP
/// The use case for the core is to support
/// zipkin/google-Dapper style tracing
table dynamic_header {
  /// alows for binary search lookup
  /// use with CreateVectorOfSortedTables<> instead of the CreateVector
  key: string (key);
  /// allows full embedding of other flatbuffers structs, such as tracing
  /// extra modules, sampling, etc
  value: [ubyte];
}

/// \brief: Payload needs to be a table because internally
/// we actually don't hold a pointer to the RPC table, we
/// construct the header from the socket and then construct
/// the payload from the socket. So we need a fbs table to wrap
/// the byte array of the body of the request.
///
/// The idea here is that the `body' will actually be another flatbuffer
/// or any other protocol, so a byte array is the lowest abstraction
///
table payload {
  /// \brief used for sending and receiving, read carefully.
  ///
  /// Receiving:
  ///
  /// Uses the same as HTTP status - on the receiving end
  /// We don't want to pay the cost of parsing a header
  /// On every response as does HTTP. std::to_string and std::stol()
  /// are needlesly expensive
  ///
  /// Sending:
  ///
  /// Used with the xor hash of Service::ID() ^ Service::Method::ID()
  /// This is how the server multiplexer figures out what function pointer
  /// to call
  ///
  meta: uint = 0;

  /// cookies are a state that is shared between client and server.
  /// server can send arbitrary state back to the client for subsequent posts
  /// cookie: [ubyte];

  /// Headers for forward compat.
  dynamic_headers: [dynamic_header];
  body: [ubyte];
}

root_type Payload;
